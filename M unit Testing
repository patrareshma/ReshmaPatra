For those who prefer writing Java instead of XML, MUnit framework provides fluent java api’s to be used with JUnit. You can create java class by extending FunctionalMunitSuite class.
Below is our java test case –
package testmule;

import java.io.InputStream;

import org.junit.Assert;
import org.junit.Test;
import org.mule.api.MuleEvent;
import org.mule.api.MuleMessage;
import org.mule.api.transport.PropertyScope;
import org.mule.munit.runner.functional.FunctionalMunitSuite;

public class SampleTestCase extends FunctionalMunitSuite {

	@Override
	protected String getConfigResources() {
		return "testmule2.xml";
	}
	
	@Test
	public void testSampleFlow(){
		InputStream is = Thread.currentThread().getContextClassLoader().getResourceAsStream("test.txt");
		MuleMessage msg = muleMessageWithPayload(is);
		try {
			msg.setProperty("originalFileName", "test.txt", PropertyScope.INBOUND);
			MuleEvent test = testEvent(msg);
			
			test.setFlowVariable("fileName2", "test2.txt");
			
			MuleEvent reply = runFlow("SampleMuleFlow", test);
			
			Assert.assertEquals("Verify Flow Variable", "test2.txt", reply.getFlowVariable("fileName2"));
			
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
				
	}
}

Points to note –
Create a MuleMessage using muleMessageWithPayload function provided by FunctionalMunitSuite super class.
Creating a MuleEvent using testEvent function provided by FunctionalMunitSuite super class.
Inbound and Outbound properties can be set on the Message we created. For flow variables and session variables, we will use the test MuleEvent. testEvent(msg) method do not copy flow variables and session variables into test event so setting anything on msg will get lost while creating test event.
Finally, we call our main flow and verify the value of our flow variable in returned message
So keep testing your code!
